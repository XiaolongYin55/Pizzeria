// import 'dart:io';
// import 'dart:convert';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:template01/components/dish_controllers.dart';
import 'package:template01/models/orders.dart';
// import 'package:template01/services/firestore.dart';
import 'package:template01/view_models/order_view_model.dart';

class OpenOrderBox extends StatefulWidget {
  @override
  _OpenOrderBoxState createState() => _OpenOrderBoxState();

  void triggerOpenOrderBox(BuildContext context, {Orders? order}) {
    showDialog(
      context: context,
      barrierColor:
          Colors.black.withOpacity(0.5), // Change background transparency here
      builder: (context) => OpenOrderBoxDialog(order: order),
    );
  }
}

class _OpenOrderBoxState extends State<OpenOrderBox> {
  @override
  Widget build(BuildContext context) {
    return Container();
  }
}

class OpenOrderBoxDialog extends StatefulWidget {
  final Orders? order;
  OpenOrderBoxDialog({Key? key, this.order}) : super(key: key);

  @override
  _OpenOrderBoxDialogState createState() => _OpenOrderBoxDialogState();
}

class _OpenOrderBoxDialogState extends State<OpenOrderBoxDialog> {
  final MyController _myCtrls = MyController();
  // final FirestoreService firestroeService = FirestoreService();
  final OrdersViewModel _ordersViewModel = OrdersViewModel();
  double amount = 0.0;
  DateTime createDate = DateTime.now();
  String username = '';

  @override
  void initState() {
    super.initState();
    if (widget.order != null) {
      _myCtrls.amountController.text = widget.order!.total.toString();
      _myCtrls.usernameController.text = widget.order!.username;
      createDate = widget.order!.createDate;
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(widget.order == null ? 'Add Order' : 'Update Order'),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: _myCtrls.amountController,
              decoration: InputDecoration(labelText: 'Amount'),
            ),
            ListTile(
              title: Text('Create Date'),
              subtitle: Text(DateFormat.yMd().format(createDate)),
              onTap: () async {
                final date = await showDatePicker(
                  context: context,
                  initialDate: createDate,
                  firstDate: DateTime(2000),
                  lastDate: DateTime.now(),
                );
                if (date != null) {
                  setState(() {
                    createDate = date;
                  });
                }
              },
            ),
            TextField(
              controller: _myCtrls.usernameController,
              decoration: InputDecoration(labelText: 'Username'),
            ),
          ],
        ),
      ),
      actions: [
        ElevatedButton(
          onPressed: () async {
            double amount;
            try {
              amount = double.parse(_myCtrls.amountController.text);
            } catch (e) {
              // Show error message if amount is not a valid number
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Please enter a valid amount')),
              );
              return;
            }

            if (widget.order == null) {
              // Add order if amount is valid
              Orders newOrder = Orders(
                id: '', // Keep this as an empty string for now
                username: _myCtrls.usernameController.text,
                total: amount,
                dishes: [], // No dishes for a new order
                createDate: createDate,
                updateDate: DateTime.now(),
              );
              DocumentReference docRef =
                  await _ordersViewModel.addOrder(newOrder);
              // Update the order with the id generated by Firebase
              await _ordersViewModel.updateOrder(newOrder..id = docRef.id);
            } else {
              // Update existing order
              Orders updatedOrder = Orders(
                id: widget.order!.id,
                username: _myCtrls.usernameController.text,
                total: amount,
                dishes: widget.order!.dishes, // Keep the original dishes
                createDate: createDate, // Use the new createDate
                updateDate: DateTime.now(),
              );
              await _ordersViewModel.updateOrder(updatedOrder);
            }

            Navigator.of(context).pop(); // Close the dialog
          },
          child: Text(widget.order == null ? 'Add' : 'Update'),
        ),
      ],
    );
  }
}
